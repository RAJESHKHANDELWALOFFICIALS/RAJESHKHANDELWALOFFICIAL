user_database = {"alice": {"password": "secret123", "security_question": "What is your favorite color?", "security_answer": "blue"}}  # Simulated database (replace with actual database)

def reset_password():
    username = input("Enter your username or email: ")

    if username not in user_database:
        print("Username or email not found.")
        return

    security_question = user_database[username]["security_question"]
    answer = input(f"{security_question} ")

    if answer.lower() != user_database[username]["security_answer"].lower():
        print("Incorrect answer. Password reset failed.")
        return

    # More secure methods for password reset (replace the following):
    # - Send password reset link via email
    # - Use a temporary password reset token

    new_password = input("Enter your new password: ")
    confirm_password = input("Re-enter your new password: ")

    # Password complexity validation (replace with a robust validation library)
    if len(new_password) < 8 or not any(char.isupper() for char in new_password) or not any(char.islower() for char in new_password) or not any(char.isdigit() for char in new_password) or not any(char in "!@#$%^&*()_+-=[]{};':|\,.<>/?~" for char in new_password):
        print("Password must be at least 8 characters long and contain uppercase, lowercase, numbers, and symbols.")
        return

    if new_password != confirm_password:
        print("Passwords do not match.")
        return

    # Simulate password update (replace with actual hashing and storage)
    user_database[username]["password"] = new_password
    print("Password reset successfully!")

reset_password()
